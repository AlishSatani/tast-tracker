"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  eq: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Not equal to the specified value."""
  ne: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the create `Task` mutation."""
input CreateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Task` to be created by this mutation."""
  task: TaskInput!
}

"""The output of our create `Task` mutation."""
type CreateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Task` that was created by this mutation."""
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the task."""
  id: UUID!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTaskNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Task` that was deleted by this mutation."""
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  accessToken: String
  refreshToken: String
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Task`."""
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `Task` using a unique key."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  """The currently logged in user (or null if not logged in)."""
  currentUser: User
  task(id: UUID!): Task

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaskFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksConnection
  user(id: UUID!): User
  userEmail(id: UUID!): UserEmail

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
}

type RegisterPayload {
  accessToken: String
  refreshToken: String
  user: User!
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value."""
  eq: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Included in the specified list."""
  in: [String!]

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Not equal to the specified value."""
  ne: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Not included in the specified list."""
  notIn: [String!]
}

"""A tasks created by admin and assigned to users."""
type Task {
  createdAt: Datetime!
  description: String

  """Unique identifier for the task."""
  id: UUID!

  """Public-facing name of the task."""
  name: String!

  """Status of the task."""
  status: TaskStatus!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Task`."""
  user: User

  """User having this task assigned."""
  userId: UUID!
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `status` field."""
  status: TaskStatus

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `Task` object types. All fields are combined with a logical ‘and.’
"""
input TaskFilter {
  """Checks for all expressions in this list."""
  and: [TaskFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: TaskFilter

  """Checks for any expressions in this list."""
  or: [TaskFilter!]

  """Filter by the object’s `status` field."""
  status: TaskStatusFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `Task`"""
input TaskInput {
  createdAt: Datetime
  description: String

  """Unique identifier for the task."""
  id: UUID

  """Public-facing name of the task."""
  name: String!

  """Status of the task."""
  status: TaskStatus
  updatedAt: Datetime
  user: TasksUserIdFkeyInput

  """User having this task assigned."""
  userId: UUID
}

"""The fields on `task` to look up the row to update."""
input TaskOnTaskForTasksUserIdFkeyUsingTasksPkeyUpdate {
  """Unique identifier for the task."""
  id: UUID!

  """
  An object where the defined keys will be set on the `task` being updated.
  """
  patch: updateTaskOnTaskForTasksUserIdFkeyPatch!
}

"""Represents an update to a `Task`. Fields that are set will be updated."""
input TaskPatch {
  createdAt: Datetime
  description: String

  """Unique identifier for the task."""
  id: UUID

  """Public-facing name of the task."""
  name: String

  """Status of the task."""
  status: TaskStatus
  updatedAt: Datetime
  user: TasksUserIdFkeyInput

  """User having this task assigned."""
  userId: UUID
}

enum TaskStatus {
  COMPLETED
  IN_PROGRESS
  TODO
}

"""
A filter to be used against TaskStatus fields. All fields are combined with a logical ‘and.’
"""
input TaskStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TaskStatus

  """Equal to the specified value."""
  eq: TaskStatus

  """Greater than the specified value."""
  greaterThan: TaskStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TaskStatus

  """Included in the specified list."""
  in: [TaskStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: TaskStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TaskStatus

  """Not equal to the specified value."""
  ne: TaskStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TaskStatus

  """Not included in the specified list."""
  notIn: [TaskStatus!]
}

"""The fields on `task` to look up the row to connect."""
input TaskTasksPkeyConnect {
  """Unique identifier for the task."""
  id: UUID!
}

"""The fields on `task` to look up the row to delete."""
input TaskTasksPkeyDelete {
  """Unique identifier for the task."""
  id: UUID!
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """A list of `Task` objects."""
  nodes: [Task!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task!
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Input for the nested mutation of `user` in the `TaskInput` mutation."""
input TasksUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUsersPkeyConnect

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnTaskForTasksUserIdFkeyUsingUsersPkeyUpdate
}

"""Input for the nested mutation of `task` in the `UserInput` mutation."""
input TasksUserIdFkeyInverseInput {
  """The primary key(s) for `task` for the far side of the relationship."""
  connectById: [TaskTasksPkeyConnect!]

  """
  A `TaskInput` object that will be created and connected to this object.
  """
  create: [TasksUserIdFkeyTasksCreateInput!]

  """The primary key(s) for `task` for the far side of the relationship."""
  deleteById: [TaskTasksPkeyDelete!]

  """
  Flag indicating whether all other `task` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `task` for the far side of the relationship.
  """
  updateById: [TaskOnTaskForTasksUserIdFkeyUsingTasksPkeyUpdate!]
}

"""The `task` to be created by this mutation."""
input TasksUserIdFkeyTasksCreateInput {
  createdAt: Datetime
  description: String

  """Unique identifier for the task."""
  id: UUID

  """Public-facing name of the task."""
  name: String!

  """Status of the task."""
  status: TaskStatus
  updatedAt: Datetime
  user: TasksUserIdFkeyInput
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  eq: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Not equal to the specified value."""
  ne: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the task."""
  id: UUID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  patch: TaskPatch!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Task` that was updated by this mutation."""
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User {
  createdAt: Datetime!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaskFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksConnection!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""Information about a user's email address."""
type UserEmail {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """Checks for all expressions in this list."""
  and: [UserEmailFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Negates the expression."""
  not: UserEmailFilter

  """Checks for any expressions in this list."""
  or: [UserEmailFilter!]

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
  user: UserEmailsUserIdFkeyInput
  userId: UUID
}

"""The fields on `userEmail` to look up the row to update."""
input UserEmailOnUserEmailForUserEmailsUserIdFkeyUsingUserEmailsPkeyUpdate {
  id: UUID!

  """
  An object where the defined keys will be set on the `userEmail` being updated.
  """
  patch: updateUserEmailOnUserEmailForUserEmailsUserIdFkeyPatch!
}

"""The fields on `userEmail` to look up the row to connect."""
input UserEmailUserEmailsPkeyConnect {
  id: UUID!
}

"""The fields on `userEmail` to look up the row to delete."""
input UserEmailUserEmailsPkeyDelete {
  id: UUID!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Input for the nested mutation of `user` in the `UserEmailInput` mutation.
"""
input UserEmailsUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUsersPkeyConnect

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnUserEmailForUserEmailsUserIdFkeyUsingUsersPkeyUpdate
}

"""
Input for the nested mutation of `userEmail` in the `UserInput` mutation.
"""
input UserEmailsUserIdFkeyInverseInput {
  """
  The primary key(s) for `userEmail` for the far side of the relationship.
  """
  connectById: [UserEmailUserEmailsPkeyConnect!]

  """
  The primary key(s) for `userEmail` for the far side of the relationship.
  """
  deleteById: [UserEmailUserEmailsPkeyDelete!]

  """
  Flag indicating whether all other `userEmail` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `userEmail` for the far side of the relationship.
  """
  updateById: [UserEmailOnUserEmailForUserEmailsUserIdFkeyUsingUserEmailsPkeyUpdate!]
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `tasks` relation."""
  tasks: UserToManyTaskFilter

  """Some related `tasks` exist."""
  tasksExist: Boolean

  """Filter by the object’s `userEmails` relation."""
  userEmails: UserToManyUserEmailFilter

  """Some related `userEmails` exist."""
  userEmailsExist: Boolean
}

"""The fields on `user` to look up the row to update."""
input UserOnTaskForTasksUserIdFkeyUsingUsersPkeyUpdate {
  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnTaskForTasksUserIdFkeyPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnUserEmailForUserEmailsUserIdFkeyUsingUsersPkeyUpdate {
  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnUserEmailForUserEmailsUserIdFkeyPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Public-facing name (or pseudonym) of the user."""
  name: String
  tasks: TasksUserIdFkeyInverseInput
  userEmails: UserEmailsUserIdFkeyInverseInput
}

"""
A filter to be used against many `Task` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyTaskFilter {
  """
  Every related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TaskFilter

  """
  No related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TaskFilter

  """
  Some related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TaskFilter
}

"""
A filter to be used against many `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserEmailFilter {
  """
  Every related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserEmailFilter

  """
  No related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserEmailFilter

  """
  Some related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserEmailFilter
}

"""The fields on `user` to look up the row to connect."""
input UserUsersPkeyConnect {
  """Unique identifier for the user."""
  id: UUID!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
An object where the defined keys will be set on the `task` being updated.
"""
input updateTaskOnTaskForTasksUserIdFkeyPatch {
  createdAt: Datetime
  description: String

  """Unique identifier for the task."""
  id: UUID

  """Public-facing name of the task."""
  name: String

  """Status of the task."""
  status: TaskStatus
  updatedAt: Datetime
  user: TasksUserIdFkeyInput
}

"""
An object where the defined keys will be set on the `userEmail` being updated.
"""
input updateUserEmailOnUserEmailForUserEmailsUserIdFkeyPatch {
  user: UserEmailsUserIdFkeyInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnTaskForTasksUserIdFkeyPatch {
  """Public-facing name (or pseudonym) of the user."""
  name: String
  tasks: TasksUserIdFkeyInverseInput
  userEmails: UserEmailsUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnUserEmailForUserEmailsUserIdFkeyPatch {
  """Public-facing name (or pseudonym) of the user."""
  name: String
  tasks: TasksUserIdFkeyInverseInput
  userEmails: UserEmailsUserIdFkeyInverseInput
}
